Rho-kinect

Have questions? Drop me a line!
chainsawctopus@gmail.com
brittany.alkire@alexastrategies.com

(i'm bound to check one of them regularly)



INSTALLING PROCESSING CONTRIBUTED LIBRARIES

	if you do not know how to install processing libraries, here is how:
	http://www.learningprocessing.com/tutorials/libraries/
	or
	http://wiki.processing.org/w/How_to_Install_a_Contributed_Library


Libraries you will need to run my program:


SAITO OBJ LOADER
-http://code.google.com/p/saitoobjloader/
	-this is being used in my program to attach meshes i have made in maya to the character that is being tracked by 		
	 the kinect and displayed in the application window.

SIMPLE OPENNI (OPENNI library wrapper for Processing)
-http://code.google.com/p/simple-openni/
	first download the OpenNI_NITE zip package appropriate for your system architecture, unzip the archive and run
	the install.sh file (the install.sh file will simply run a bash script in the console to put the openi and nite
	files in the correct directory configuration) then download the SimpleOpenNI-0.26.zip and extract all files. 
	Once all files have been extracted, copy the "library" folder to the "libraries" directory, which should be 
	located in which ever directory you have specified for your Processing sketches. (Normally in /Users/usernam 

DANIEL SHIFFMAN KINECT (Optional but recommended)
-http://www.shiffman.net/p5/kinect/
	his tutorials are also very helpful in getting started with not only his libraries but the general idea and 
	mechanics of the kinect itself.

----------------------------------------------------------------------------------------------------------------------

A FEW NOTES ON COMPATIBILITY:


Processing 2.0a4 will not play nicely with older versions of opengl calls made through java (JOGL functions) - in fact, opengl in general tends to be more than 
a bit sluggish with any version of Processing later than 1.5.1 ...

As far as the IDE is concerned, Processing's IDE is advised; however, other Java-friendly IDEs are just fine
(i.e. Eclipse, netbeans, command line, etc) Do note that your project will have a different setup or file hierarchy 
when migrating code to different development environments. You'll need to know how to adjust for that accordingly. 
Of course, if you have questions, feel free to email me at the email addresses i mentioned above because
because i have written, developed and tested this code in just abouve every text editor you can imagine, 
so i can save you a lot of undue pain and suffering.


These are the operating systems on which this project has been tested:
	Mac OSX - 10.6.* (Snow Leopard) and 10.7 (Lion)
	Windows 7 is something i have on my TODO list
	Ubuntu 11.14 and 12.04 can run this smoothly, watch your hardware though, i'm still working out 
			some resource utilization kinks
			
	
	
UPDATE 11.12.13

Hello againz! Time to bring this project back from the dead.

I am thinking about rewriting my OBJ and MTL parsing code because it's slow and it is making me angry. Also,
my parser does not quite yet handle quads smoothly. With mine in its current state you need to triangulate your
surfaces before export. Parametric surfaces are ideal (as they are made up of a bunch of triangles)
With that said, SaitoOBJ is a FANTASTIC library, but I do believe I would rather use mine because it works much the same way
(as it stands, Saito's library is mre stable) and any code that comes from my brain is oddly easier to deal with for me than other people, 
and at the end the day, I feel more accomplished.

Also be expecting better collision code and a fix for that pesky little glMatrix glitch (you know, the one that sends
you flying with the ball your "character" picks up) Yeah, workin' on that. 


Anyone who is working with graphics, opengl or kinect is more than welcome to use this code - at their own risk. And hell,
if you do something cool and make it better, message me! I'd love to give you a well-deserved beer or cookie.

